{"version":3,"sources":["components/CountryPicker/CountryPicker.module.css","components/Charts/Charts.module.css","components/StateTimeLine.js","components/StateDataModal.js","components/USAMap.js","components/SideInfo/SideInfo.js","components/MapContainer.js","components/NavBar.js","components/LandingPage.js","components/Cards/Cards.jsx","components/CountryPicker/CountryPicker.jsx","components/api/index.js","components/Charts/Charts.jsx","components/Global.js","App.js","serviceWorker.js","index.js","components/Cards/Cards.module.css","components/SideInfo/SideInfo.module.css","images/coronavirus.png"],"names":["module","exports","StateTimeLine","props","Div","styled","div","stateDataTimeLine","length","map","data","className","date","iconStyle","backgroundImage","CoronaVirusImg","boxShadow","backgroundRepeat","backgroundSize","tested","positive","deaths","Spinner","animation","variant","StateDataModal","stateInfo","state","hospitalized","recovered","death","lastUpdateEt","stopModal","useState","lgShow","setLgShow","shouldFetch","setShouldFetch","setStateDataTimeLine","useEffect","fetch","headers","then","res","text","normalized","day","split","shift","dailyDataArr","i","dailyData","Date","toString","parseInt","push","normalizeData","catch","err","console","log","Modal","size","show","onHide","aria-labelledby","onClick","Header","closeButton","Title","id","Body","colspan","start","end","duration","separator","Map","states","setStateInfo","showModal","setShowModal","x","stateObj","sorted","sort","a","b","count","forEach","fill","clickHandler","event","target","dataset","largest","statesCustomConfig","window","innerWidth","width","customize","title","stateData","idx","name","Grid","container","spacing","justify","item","component","Card","xs","md","cx","styles","legend","card","CardContent","Typography","most","mostCaption","least","leastCaption","MapContainer","setStates","json","SideInfo","redirect","setRedirect","redirector","open","parentNode","childNodes","classList","toggle","lineOpen","to","Home","h1","Lives","confirmed","lastUpdate","infected","color","gutterBottom","value","toDateString","fetchedCountries","setFetchedCountries","fetchCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","handleCountryChange","country","key","url","fetchData","changeableURL","axios","get","fetchDailyData","modifiedData","total","reportDate","countries","setDailyData","lineChart","labels","datasets","label","borderColor","backgroundColor","barChart","options","display","Global","fetchedData","setState","this","Cards","CountryPicker","Charts","Component","App","NavBar","path","render","LandingPage","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7573c264.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3DpXd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__2XxMc\"};","import React from 'react';\r\nimport { VerticalTimeline, VerticalTimelineElement }  from 'react-vertical-timeline-component';\r\nimport 'react-vertical-timeline-component/style.min.css';\r\nimport CoronaVirusImg from '../images/coronavirus.png';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport styled from 'styled-components';\r\n\r\nconst StateTimeLine = props => {\r\n    const Div = styled.div`\r\n      width: 100%;\r\n      margin: 0 auto;\r\n      display: flex;\r\n      justify-content: space-evenly;\r\n    `;\r\n\r\n    const dayElement = () => {\r\n      if(props.stateDataTimeLine.length > 0) {\r\n        return props.stateDataTimeLine.map(data => {\r\n          return <VerticalTimelineElement\r\n                  className=\"vertical-timeline-element--work\"\r\n                  date={data.date}\r\n                  iconStyle={{ backgroundImage: `url(${CoronaVirusImg})`, boxShadow: 'none', backgroundRepeat: 'no-repeat', backgroundSize: 'cover' }}\r\n              >\r\n                <ul>\r\n                  <li><strong> Tested: </strong> { data.tested } </li>\r\n                  <li><strong> Positive: </strong> { data.positive } </li>\r\n                  <li><strong> Death: </strong> { data.deaths } </li>\r\n                </ul>\r\n          </VerticalTimelineElement>\r\n        })\r\n      } else {\r\n        return(\r\n          <Div>\r\n            <Spinner animation=\"grow\" variant=\"primary\" />\r\n            <Spinner animation=\"grow\" variant=\"secondary\" />\r\n            <Spinner animation=\"grow\" variant=\"success\" />\r\n            <Spinner animation=\"grow\" variant=\"danger\" />\r\n            <Spinner animation=\"grow\" variant=\"warning\" />\r\n            <Spinner animation=\"grow\" variant=\"info\" />\r\n            <Spinner animation=\"grow\" variant=\"dark\" />\r\n          </Div>\r\n        )\r\n      }\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <VerticalTimeline>\r\n          { dayElement() }\r\n        </VerticalTimeline>\r\n    )\r\n}\r\n\r\nexport default StateTimeLine;","import React, { useState, useEffect } from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport StateTimeLine from './StateTimeLine';\r\nimport CountUp from 'react-countup';\r\n\r\n\r\n\r\nconst StateDataModal = ( {stateInfo: { state, positive, hospitalized, recovered, death, lastUpdateEt }, stopModal }) => {\r\n    const [ lgShow, setLgShow ] = useState(true);\r\n    const [ shouldFetch, setShouldFetch ] = useState(true);\r\n    const [ stateDataTimeLine, setStateDataTimeLine ] = useState([])\r\n\r\n    const normalizeData = data => {\r\n      let day = data.split('\\n');\r\n      day.shift()\r\n      const dailyDataArr = []\r\n      for(let i = 0; i < day.length; i++) {\r\n        const dailyData = {}\r\n        const data = day[i].split(\",\")\r\n        dailyData.date = new Date(data[0] * 1000).toString()\r\n        dailyData.tested = parseInt(data[1] || 0)\r\n        dailyData.positive = parseInt(data[2] || 0)\r\n        dailyData.deaths = parseInt(data[3] || 0)\r\n        dailyDataArr.push(dailyData)\r\n      }\r\n      return dailyDataArr\r\n    }\r\n\r\n    useEffect(() => {\r\n      fetch(`https://cors-anywhere.herokuapp.com/http://coronavirusapi.com/getTimeSeries/${state}`, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-Requested-With': 'XMLHttpRequest',\r\n        }})\r\n      .then(res => res.text())\r\n      .then(data => {\r\n          const normalized = normalizeData(data)\r\n          setStateDataTimeLine(normalized)\r\n          setShouldFetch(false)\r\n      })\r\n      .catch(err => console.log(err))\r\n    }, shouldFetch)\r\n  \r\n    return (\r\n      <>\r\n        <Modal\r\n          size=\"lg\"\r\n          show={lgShow}\r\n          onHide={() => setLgShow(!lgShow)}\r\n          aria-labelledby=\"example-modal-sizes-title-lg\"\r\n          onClick={stopModal}\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id=\"example-modal-sizes-title-lg\">\r\n            { state }\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <table>\r\n              <thead>\r\n                <td colspan=\"2\"> Cases </td>\r\n                <td colspan=\"2\"> Hospitalized </td>\r\n                <td colspan=\"2\"> Recovered </td>\r\n                <td colspan=\"2\"> Death </td>\r\n                <td colspan=\"2\"> Last Updated </td>\r\n              </thead>\r\n              <tr>\r\n                <td colspan=\"2\">\r\n                  <CountUp start={ 0 } end={ positive } duration={ 2.5 } separator=\",\" />\r\n                </td>\r\n                <td colspan=\"2\">\r\n                  <CountUp start={ 0 } end={ hospitalized } duration={ 2.5 } separator=\",\" />\r\n                </td>\r\n                <td colspan=\"2\">\r\n                  <CountUp start={ 0 } end={ recovered } duration={ 2.5 } separator=\",\" />\r\n                </td>\r\n                <td colspan=\"2\">\r\n                  <CountUp start={ 0 } end={ death } duration={ 2.5 } separator=\",\" />\r\n                </td>\r\n                <td colspan=\"2\">{lastUpdateEt}</td>\r\n              </tr>\r\n            </table>\r\n            \r\n              <StateTimeLine stateDataTimeLine={ stateDataTimeLine }/>\r\n          </Modal.Body>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n  \r\n  export default StateDataModal;","import React, { useState } from 'react';\r\nimport USAMap from \"react-usa-map\";\r\nimport StateDataModal from './StateDataModal';\r\n// import Modal from 'react-bootstrap/Modal';\r\n// import Button from '@material-ui/core/Button';\r\n \r\nconst Map = ({ states }) => {\r\n  const [stateInfo, setStateInfo ] = useState({});\r\n  const [showModal, setShowModal] = useState(false);\r\n  \r\n\r\n  const screenSize = () => {\r\n    if(window.innerWidth > 1000) {\r\n      return window.innerWidth\r\n    } \r\n    return window.innerWidth - 10\r\n  }\r\n\r\n  const sortByCases = () => {\r\n    return states.sort((a, b) => {\r\n      return a.positive - b.positive\r\n    })\r\n  }\r\n \r\n  const statesCustomConfig = () => {\r\n    const stateObj = {}\r\n    const sorted = sortByCases();\r\n    let count = 0\r\n\r\n    sorted.forEach(state => {\r\n        stateObj[state.state] = {\r\n            fill: `rgb(0, ${count}, 0, 0.8)`,\r\n            clickHandler: event => {\r\n                console.log(`Custom handler for ${event.target.dataset}`, state )\r\n                setStateInfo(state)\r\n                setShowModal(true)\r\n            }\r\n        }\r\n        count += 5\r\n    })\r\n\r\n    if(states.length > 0) {\r\n      const largest = sorted[sorted.length - 1]\r\n      stateObj[largest.state].fill = 'red'\r\n    }\r\n    \r\n    return stateObj\r\n  };\r\n\r\n  const stopModal = () => {\r\n    setShowModal(false)\r\n  }\r\n\r\n    const x = statesCustomConfig();\r\n    const y = screenSize(); // add width={y} to USAMap for size\r\n\r\n    return (\r\n      <div>\r\n        <USAMap className=\"map\" width=\"\" customize={x} title=\"United States of America COVID-19\"/>\r\n\r\n        {showModal && (\r\n          <StateDataModal\r\n            showModal={ showModal }\r\n            stopModal={ stopModal }\r\n            stateInfo={ stateInfo }\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  \r\n}\r\n \r\nexport default Map;","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport styles from './SideInfo.module.css';\r\nimport cx from 'classnames';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nexport default ({ states }) => {\r\n    const sortStates = () => {\r\n        const sorted = states.sort((a, b) => {\r\n            return a.positive - b.positive; \r\n        })\r\n\r\n        return sorted;\r\n    }\r\n    \r\n    const stateData = idx => {\r\n        const { state, positive } = sortStates()[idx];\r\n        const stateObj = {};\r\n        stateObj.name = state;\r\n        stateObj.positive = positive;\r\n\r\n        return stateObj;\r\n    }\r\n\r\n    const mostCaption = state => {\r\n        const { name, positive } = state;\r\n        return <p> { `${name} is currently the leading state with the most COVID-19 cases at ${positive}.` } </p>\r\n    }\r\n\r\n    const leastCaption = state => {\r\n        const { name, positive } = state;\r\n        return <p> { `${name} is currently the state with the least amount of COVID-19 cases at ${positive}.` } </p>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"side-container\">\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={ Card } xs={ 12 } md={ 10 } className={ cx(styles.legend, styles.card) }>\r\n                    <CardContent>\r\n                        <h1> Legend </h1>\r\n                        <Typography variant=\"body2\"> This map shows which state has the most COVID-19 cases based on the color. The brighter the green the more cases there are. The state colored in red is currently the state with the most COVID-19 cases. \r\n                        <br></br>\r\n                        Clicking on a state will show you the amount of cases, recoveries, deaths, and timeline of that current state.\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={ Card } xs={ 12 } md={ 10 } className={ cx(styles.legend, styles.most) }>\r\n                    <CardContent>\r\n                        <h2> Most Cases </h2>\r\n                        <Typography variant=\"body2\"> { states.length ? mostCaption(stateData(states.length - 1)) : null } </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={ Card } xs={ 12 } md={ 10 } className={ cx(styles.legend, styles.least) }>\r\n                    <CardContent>\r\n                        <h2> Least Cases </h2>\r\n                        <Typography variant=\"body2\"> { states.length ? leastCaption(stateData(0)) : null } </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Map from './USAMap';\r\n// import Button from '@material-ui/core/Button';\r\nimport SideInfo from './SideInfo/SideInfo';\r\n// import { fetchStates } from './api';\r\n\r\n\r\n\r\nconst MapContainer = () => {\r\n    const [ states, setStates ] = useState([])\r\n    const [ shouldFetch, setShouldFetch ] = useState(true)\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://covidtracking.com/api/v1/states/current.json\")\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            setStates(data)\r\n            setShouldFetch(false)\r\n        })\r\n    }, shouldFetch)\r\n    \r\n    return (\r\n        <div className=\"map_container\">\r\n            <Map states={states}/>\r\n            <SideInfo states={states}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MapContainer;","import React, { useState } from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\n\r\nexport default () => {\r\n    const [ redirect, setRedirect ] = useState(\"\");\r\n\r\n    const redirector = event => {\r\n        setRedirect(event.target.id)\r\n    }\r\n\r\n    const open = event => {\r\n        console.log(event)\r\n        event.target.parentNode.childNodes[1].classList.toggle('open')\r\n    }\r\n\r\n    const lineOpen = event => {\r\n        console.log(event)\r\n        event.target.parentNode.parentNode.childNodes[1].classList.toggle('open')\r\n    }\r\n\r\n    const renderRedirect = () => {\r\n        return <Redirect to={`/${redirect}`}/>\r\n    }\r\n\r\n    return(\r\n        <nav>\r\n            { redirect && renderRedirect() }\r\n            <div className=\"hamburger\" onClick={ open }>\r\n                <div className=\"line\" onClick={ lineOpen }> </div>\r\n                <div className=\"line\" onClick={ lineOpen }> </div>\r\n                <div className=\"line\" onClick={ lineOpen }> </div>\r\n            </div>\r\n            <ul className=\"nav-links\" onClick={ open }>\r\n                <li id=\"home\" onClick={ redirector }> Home </li>\r\n                <li id=\"map\" onClick={ redirector }> Map </li>\r\n                <li id=\"global\" onClick={ redirector }> Global </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport default () => {\r\n    const Div = styled.div`\r\n        width: 100%;\r\n        height: 100vh;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n    `;\r\n\r\n    const Home = styled.h1`\r\n        font-size: 8rem;\r\n        letter-spacing: 5px;\r\n        color: #5b78c7;\r\n    `;\r\n\r\n    const Lives = styled.h1`\r\n        font-size: 8rem;\r\n        letter-spacing: 5px;\r\n        text-shadow:\r\n        -1px -1px 0 #5b78c7,  \r\n        1px -1px 0 #5b78c7,\r\n        -1px 1px 0 #5b78c7,\r\n        1px 1px 0 #5b78c7;\r\n        color: white;\r\n    `;\r\n\r\n    return(\r\n        <Div>\r\n            <div>\r\n                <Home> Stay Home </Home>\r\n                <Lives> Save Lives </Lives>\r\n            </div>\r\n        </Div>\r\n    )\r\n}","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport styles from './Cards.module.css';\r\nimport cx from 'classnames';\r\n\r\nexport default ({data: { confirmed, recovered, deaths, lastUpdate }}) => {\r\n    if(!confirmed) {\r\n        return 'Loading...'\r\n    }\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={ Card } className={ cx(styles.card, styles.infected) } xs={ 12 } md={ 3 }>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom> Infected </Typography>\r\n                        <Typography variant=\"h5\"> \r\n                            <CountUp start={ 0 } end={ confirmed.value } duration={ 2.5 } separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\"> { new Date(lastUpdate).toDateString() } </Typography>\r\n                        <Typography variant=\"body2\"> Number of active cases of COVID-19 </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={ Card } className={ cx(styles.card, styles.recovered) } xs={ 12 } md={ 3 }>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom> Recovered </Typography>\r\n                        <Typography variant=\"h5\"> \r\n                            <CountUp start={ 0 } end={ recovered.value } duration={ 2.5 } separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\"> { new Date(lastUpdate).toDateString() } </Typography>\r\n                        <Typography variant=\"body2\"> Number of recoveries COVID-19 </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={ Card } className={ cx(styles.card, styles.deaths) } xs={ 12 } md={ 3 }>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom> Deaths </Typography>\r\n                        <Typography variant=\"h5\"> \r\n                            <CountUp start={ 0 } end={ deaths.value } duration={ 2.5 } separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\"> { new Date(lastUpdate).toDateString() } </Typography>\r\n                        <Typography variant=\"body2\"> Number of deaths caused by COVID-19 </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport { fetchCountries } from '../api';\r\n\r\nexport default props => {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async() => {\r\n            setFetchedCountries(await fetchCountries())\r\n        }\r\n\r\n        fetchAPI()\r\n    }, [setFetchedCountries])\r\n\r\n    return(\r\n        <FormControl className={ styles.formControl }>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => props.handleCountryChange(e.target.value)}>\r\n                <option value=\"\"> Global </option>\r\n                { fetchedCountries.map((country, i) => <option key={ i } value={ country }> { country } </option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}","import axios from 'axios';\r\nimport CountryPicker from '../CountryPicker/CountryPicker';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\nconst states = 'https://covidtracking.com/api/v1/states/current.json';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableURL = url;\r\n\r\n    if(country) {\r\n        changeableURL = `${url}/countries/${country}`\r\n    }\r\n\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableURL);\r\n        return { confirmed, recovered, deaths, lastUpdate };\r\n    } catch(error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`)\r\n        const modifiedData = data.map(dailyData => (\r\n            {\r\n                confirmed: dailyData.confirmed.total,\r\n                deaths: dailyData.deaths.total,\r\n                date: dailyData.reportDate,\r\n            }\r\n        ));\r\n\r\n        return modifiedData;\r\n    } catch(error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async() => {\r\n    try {\r\n        const { data: { countries }} = await axios.get(`${url}/countries`);\r\n        return countries.map(country => country.name);\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchStates = async() => {\r\n    try {\r\n        const states = await axios.get(states);\r\n        return states;\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport styles from './Charts.module.css';\r\n\r\nexport default ({ data: { confirmed, deaths, recovered }, country }) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async() => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchAPI();\r\n    }, [])\r\n\r\n    const lineChart = (\r\n        dailyData.length ? (<Line \r\n            data={{\r\n                labels: dailyData.map(({ date }) => date),\r\n                datasets: [{\r\n                    data: dailyData.map(({ confirmed }) => confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: '#3333ff',\r\n                    fill: true,\r\n                }, {\r\n                    data: dailyData.map(({ deaths }) => deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: 'red',\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                    fill: true,\r\n                }],\r\n            }}\r\n        />) : null\r\n    );\r\n\r\n    const barChart = (\r\n        confirmed\r\n        ? (\r\n            <Bar \r\n                data={{\r\n                    labels: ['Infected', 'Recovered', 'Deaths'],\r\n                    datasets: [{\r\n                        label: 'People',\r\n                        backgroundColor: [`rgba(0, 0, 255, 0.5)`, `rgba(0, 255, 0, 0.5)`, `rgba(255, 0, 0, 0.5)`],\r\n                        data: [confirmed.value, recovered.value, deaths.value]\r\n                    }]\r\n                }}\r\n                options={{\r\n                    legend: { display: false },\r\n                    title: { display: true, text: `Current state in ${country}` },\r\n                }}\r\n            />\r\n        ) : null\r\n    )\r\n\r\n    return(\r\n        <div className={ styles.container }>\r\n            { country ? barChart : lineChart }\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport { Cards, Charts, CountryPicker } from '../components';\r\nimport { fetchData } from './api';\r\n\r\n\r\nclass Global extends Component {\r\n    state = {\r\n        data: {},\r\n        country: '',\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const fetchedData = await fetchData();\r\n        this.setState({\r\n            data: fetchedData\r\n        })\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        const fetchedData = await fetchData(country);\r\n        this.setState({ data: fetchedData, country: country });\r\n    }\r\n\r\n    render() {\r\n        const { data, country } = this.state;\r\n        return(\r\n            <div className=\"global_container\">\r\n                <Cards data={ data } />\r\n                <CountryPicker handleCountryChange={ this.handleCountryChange } />\r\n                <Charts data={ data } country={ country } />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Global;","import React from 'react';\nimport MapContainer from './components/MapContainer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NavBar from './components/NavBar';\nimport LandingPage from './components/LandingPage';\nimport Global from './components/Global';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <NavBar />\n      <Switch>\n        <Route path=\"/map\" render={() => <MapContainer />} />\n        <Route path=\"/home\" render={() => <LandingPage />} />\n        <Route path=\"/global\" render={() => <Global />} />\n        <Route path=\"/\" render={() => <LandingPage />} />\n      </Switch>\n    </Router >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1kHVR\",\"card\":\"Cards_card__1uFb2\",\"infected\":\"Cards_infected__1HkaV\",\"recovered\":\"Cards_recovered__1NSOD\",\"deaths\":\"Cards_deaths__1XNX7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"SideInfo_card__2U38O\",\"legend\":\"SideInfo_legend__PQVHC\",\"most\":\"SideInfo_most__KoLKi\",\"least\":\"SideInfo_least__2JVj1\"};","module.exports = __webpack_public_path__ + \"static/media/coronavirus.e570556b.png\";"],"sourceRoot":""}